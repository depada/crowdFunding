import {
  Signer,
  defineReadOnly,
  getDefaultProvider,
  init_lib13 as init_lib2,
  init_lib20 as init_lib3,
  init_lib4 as init_lib
} from "./chunk-RGAYGF33.js";
import {
  init_shim
} from "./chunk-ZGMFR26H.js";

// node_modules/@paperxyz/embedded-wallet-service-sdk/dist/index.mjs
init_shim();

// node_modules/@paperxyz/sdk-common-utilities/dist/index.mjs
init_shim();
var o = { Ethereum: "https://rpc.ankr.com/eth", Goerli: "https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161", Mumbai: "https://rpc-mumbai.maticvigil.com", Polygon: "https://rpc-mainnet.maticvigil.com", Avalanche: "https://api.avax.network/ext/bc/C/rpc", Optimism: "https://optimism.rpc.thirdweb.com", OptimismGoerli: "https://optimism-goerli.rpc.thirdweb.com", BSC: "https://binance.rpc.thirdweb.com", BSCTestnet: "https://binance-testnet.rpc.thirdweb.com", ArbitrumOne: "https://arbitrum.rpc.thirdweb.com", ArbitrumGoerli: "https://arbitrum-goerli.rpc.thirdweb.com", Fantom: "https://fantom.rpc.thirdweb.com", FantomTestnet: "https://fantom-testnet.rpc.thirdweb.com" };
var e = () => typeof window != "undefined" && window.localStorage.getItem("IS_PAPER_DEV") === "true";
var r = () => typeof window != "undefined" && window.location.origin.includes("paper.xyz");
var i = () => {
  var t;
  return e() ? (t = window.localStorage.getItem("PAPER_DEV_URL")) != null ? t : "http://localhost:3000" : r() ? window.location.origin : "https://withpaper.com";
};

// node_modules/@paperxyz/embedded-wallet-service-sdk/dist/index.mjs
init_lib3();
init_lib2();
init_lib();
var Q = Object.defineProperty;
var F = Object.defineProperties;
var H = Object.getOwnPropertyDescriptors;
var b = Object.getOwnPropertySymbols;
var z = Object.prototype.hasOwnProperty;
var V = Object.prototype.propertyIsEnumerable;
var N = (a, e2, t) => e2 in a ? Q(a, e2, { enumerable: true, configurable: true, writable: true, value: t }) : a[e2] = t;
var u = (a, e2) => {
  for (var t in e2 || (e2 = {}))
    z.call(e2, t) && N(a, t, e2[t]);
  if (b)
    for (var t of b(e2))
      V.call(e2, t) && N(a, t, e2[t]);
  return a;
};
var E = (a, e2) => F(a, H(e2));
var i2 = (a, e2, t) => new Promise((r2, s) => {
  var n = (l) => {
    try {
      d(t.next(l));
    } catch (p) {
      s(p);
    }
  }, o2 = (l) => {
    try {
      d(t.throw(l));
    } catch (p) {
      s(p);
    }
  }, d = (l) => l.done ? r2(l.value) : Promise.resolve(l.value).then(n, o2);
  d((t = t.apply(a, e2)).next());
});
var y = "/sdk/2022-08-12/embedded-wallet";
var A = (a) => `paperEwsWalletUserId-${a}`;
var j = "walletToken";
var L = (a) => `${j}-${a}`;
var P = "a";
var f = (a, e2) => `${P}-${a}-${e2}`;
var re = (a) => `${P}-${a}`;
var q = ((n) => (n.PAPER_EMAIL_OTP = "PaperEmailOTP", n.GOOGLE = "Google", n.TWITTER = "Twitter", n.AUTH0 = "Auth0", n.CUSTOM_JWT = "CustomJWT", n))(q || {});
var G = ((t) => (t.LOGGED_OUT = "Logged Out", t.LOGGED_IN_WALLET_INITIALIZED = "Logged In, Wallet Initialized", t))(G || {});
var R = ((s) => (s.LOGGED_OUT = "Logged Out", s.LOGGED_IN_WALLET_UNINITIALIZED = "Logged In, Wallet Uninitialized", s.LOGGED_IN_NEW_DEVICE = "Logged In, New Device", s.LOGGED_IN_WALLET_INITIALIZED = "Logged In, Wallet Initialized", s))(R || {});
var x = /* @__PURE__ */ new Map();
var m = class {
  constructor({ clientId: e2 }) {
    this.isSupported = typeof window != "undefined" && !!window.localStorage, this.clientId = e2;
  }
  getItem(e2) {
    return i2(this, null, function* () {
      var t;
      return this.isSupported ? window.localStorage.getItem(e2) : (t = x.get(e2)) != null ? t : null;
    });
  }
  setItem(e2, t) {
    return i2(this, null, function* () {
      if (this.isSupported)
        return window.localStorage.setItem(e2, t);
      x.set(e2, t);
    });
  }
  removeItem(e2) {
    return i2(this, null, function* () {
      let t = yield this.getItem(e2);
      return this.isSupported && t ? (window.localStorage.removeItem(e2), true) : false;
    });
  }
  saveAuthCookie(e2) {
    return i2(this, null, function* () {
      yield this.setItem(L(this.clientId), e2);
    });
  }
  getAuthCookie() {
    return i2(this, null, function* () {
      return this.getItem(L(this.clientId));
    });
  }
  removeAuthCookie() {
    return i2(this, null, function* () {
      return this.removeItem(L(this.clientId));
    });
  }
  saveDeviceShare(e2, t) {
    return i2(this, null, function* () {
      yield this.saveWalletUserId(t), yield this.setItem(f(this.clientId, t), e2);
    });
  }
  getDeviceShare() {
    return i2(this, null, function* () {
      let e2 = yield this.getWalletUserId();
      return e2 ? this.getItem(f(this.clientId, e2)) : null;
    });
  }
  removeDeviceShare() {
    return i2(this, null, function* () {
      let e2 = yield this.getWalletUserId();
      return e2 ? this.removeItem(f(this.clientId, e2)) : false;
    });
  }
  getWalletUserId() {
    return i2(this, null, function* () {
      return this.getItem(A(this.clientId));
    });
  }
  saveWalletUserId(e2) {
    return i2(this, null, function* () {
      yield this.setItem(A(this.clientId), e2);
    });
  }
  removeWalletUserId() {
    return i2(this, null, function* () {
      return this.removeItem(A(this.clientId));
    });
  }
};
function C(a) {
  return new Promise((e2) => {
    setTimeout(e2, a * 1e3);
  });
}
var Z = { height: "100%", width: "100%", border: "none", backgroundColor: "transparent", colorScheme: "light", position: "fixed", top: "0px", right: "0px", zIndex: "2147483646", display: "none" };
var v = /* @__PURE__ */ new Map();
var _ = class {
  constructor({ link: e2, iframeId: t, container: r2 = document.body, iframeStyles: s, onIframeInitialize: n }) {
    this.POLLING_INTERVAL_SECONDS = 1.4;
    this.POST_LOAD_BUFFER_SECONDS = 1;
    let o2 = document.getElementById(t), d = new URL(e2), l = "1.0.1";
    if (!l)
      throw new Error("Missing SDK_VERSION env var");
    if (d.searchParams.set("sdkVersion", l), !o2 || o2.src != d.href) {
      if (!o2) {
        o2 = document.createElement("iframe");
        let p = u(u({}, Z), s);
        Object.assign(o2.style, p), o2.setAttribute("id", t), r2.appendChild(o2);
      }
      o2.src = d.href, o2.setAttribute("data-version", l), o2.onload = this.onIframeLoadHandler(o2, this.POST_LOAD_BUFFER_SECONDS, n);
    }
    this.iframe = o2;
  }
  onIframeLoadedInitVariables() {
    return i2(this, null, function* () {
      return {};
    });
  }
  onIframeLoadHandler(e2, t, r2) {
    return () => i2(this, null, function* () {
      yield new Promise((n, o2) => i2(this, null, function* () {
        var p;
        let d = new MessageChannel();
        d.port1.onmessage = (T) => {
          let { data: h } = T;
          return d.port1.close(), h.success ? (v.set(e2.src, true), r2 && r2(), n(true)) : o2(new Error(h.error));
        }, yield C(t);
        let l = "initIframe";
        (p = e2 == null ? void 0 : e2.contentWindow) == null || p.postMessage({ eventType: l, data: yield this.onIframeLoadedInitVariables() }, `${i()}${y}`, [d.port2]);
      }));
    });
  }
  call(n) {
    return i2(this, arguments, function* ({ procedureName: e2, params: t, showIframe: r2 = false, injectRecoveryCode: s = { isInjectRecoveryCode: false } }) {
      for (; !v.get(this.iframe.src); )
        yield C(this.POLLING_INTERVAL_SECONDS);
      return r2 && (this.iframe.style.display = "block", yield C(5e-3)), new Promise((d, l) => {
        var T;
        if (s.isInjectRecoveryCode) {
          let h = (c) => i2(this, null, function* () {
            var O, U;
            if (c.origin !== i() || c.data.type !== "paper_getRecoveryCode" || typeof c.data.userWalletId != "string")
              return;
            let k = yield (O = s.getRecoveryCode) == null ? void 0 : O.call(s, c.data.userWalletId);
            (U = this.iframe.contentWindow) == null || U.postMessage({ type: "paper_getRecoveryCode_response", recoveryCode: k }, i()), window.removeEventListener("message", h);
          });
          window.addEventListener("message", h);
        }
        let p = new MessageChannel();
        p.port1.onmessage = (h) => i2(this, null, function* () {
          let { data: c } = h;
          p.port1.close(), r2 && (yield C(0.1), this.iframe.style.display = "none"), c.success ? d(c.data) : l(new Error(c.error));
        }), (T = this.iframe.contentWindow) == null || T.postMessage({ eventType: e2, data: t }, `${i()}${y}`, [p.port2]);
      });
    });
  }
  destroy() {
    v.delete(this.iframe.src);
  }
};
var w = class extends _ {
  constructor({ clientId: t, customizationOptions: r2 }) {
    super({ iframeId: J, link: B({ clientId: t, path: y, queryParams: r2 }).href, container: document.body });
    this.clientId = t;
  }
  onIframeLoadedInitVariables() {
    return i2(this, null, function* () {
      let t = new m({ clientId: this.clientId });
      return { authCookie: yield t.getAuthCookie(), deviceShareStored: yield t.getDeviceShare(), walletUserId: yield t.getWalletUserId(), clientId: this.clientId };
    });
  }
};
function B({ clientId: a, path: e2, queryParams: t }) {
  var s;
  let r2 = new URL(e2, i());
  if (t)
    for (let n of Object.keys(t))
      r2.searchParams.set(n, ((s = t[n]) == null ? void 0 : s.toString()) || "");
  return r2.searchParams.set("clientId", a), r2;
}
var J = "paper-embedded-wallet-iframe";
var D = class {
  constructor({ clientId: e2, querier: t, onAuthSuccess: r2 }) {
    this.clientId = e2, this.AuthQuerier = t, this.localStorage = new m({ clientId: e2 }), this.onAuthSuccess = r2;
  }
  preLogin() {
    return i2(this, null, function* () {
      yield this.logout();
    });
  }
  postLogin(r2) {
    return i2(this, arguments, function* ({ storedToken: e2, walletDetails: t }) {
      return e2.shouldStoreCookieString && (yield this.localStorage.saveAuthCookie(e2.cookieString)), yield this.onAuthSuccess({ storedToken: e2, walletDetails: t });
    });
  }
  loginWithJwtAuth(s) {
    return i2(this, arguments, function* ({ token: e2, authProvider: t, recoveryCode: r2 }) {
      yield this.preLogin();
      let n = yield this.AuthQuerier.call({ procedureName: "loginWithJwtAuthCallback", params: { token: e2, authProvider: t, recoveryCode: r2 } });
      return this.postLogin(n);
    });
  }
  loginWithPaperModal(e2) {
    return i2(this, null, function* () {
      yield this.preLogin();
      let t = yield this.AuthQuerier.call({ procedureName: "loginWithPaperModal", params: void 0, showIframe: true, injectRecoveryCode: { isInjectRecoveryCode: true, getRecoveryCode: e2 == null ? void 0 : e2.getRecoveryCode } });
      return this.postLogin(t);
    });
  }
  loginWithPaperEmailOtp(r2) {
    return i2(this, arguments, function* ({ email: e2, recoveryCode: t }) {
      yield this.preLogin();
      let s = yield this.AuthQuerier.call({ procedureName: "loginWithPaperModal", params: { email: e2, recoveryCode: t }, showIframe: true, injectRecoveryCode: { isInjectRecoveryCode: true } });
      return this.postLogin(s);
    });
  }
  sendPaperEmailLoginOtp(t) {
    return i2(this, arguments, function* ({ email: e2 }) {
      yield this.preLogin();
      let { isNewUser: r2, isNewDevice: s } = yield this.AuthQuerier.call({ procedureName: "sendPaperEmailLoginOtp", params: { email: e2 } });
      return { isNewUser: r2, isNewDevice: s };
    });
  }
  verifyPaperEmailLoginOtp(s) {
    return i2(this, arguments, function* ({ email: e2, otp: t, recoveryCode: r2 }) {
      let n = yield this.AuthQuerier.call({ procedureName: "verifyPaperEmailLoginOtp", params: { email: e2, otp: t, recoveryCode: r2 }, injectRecoveryCode: { isInjectRecoveryCode: true } });
      return this.postLogin(n);
    });
  }
  logout() {
    return i2(this, null, function* () {
      let { success: e2 } = yield this.AuthQuerier.call({ procedureName: "logout", params: void 0 }), t = yield this.localStorage.removeAuthCookie(), r2 = yield this.localStorage.removeWalletUserId();
      return { success: e2 || t || r2 };
    });
  }
};
var I = class {
  constructor({ chain: e2, clientId: t, querier: r2 }) {
    this.chain = e2, this.clientId = t, this.gaslessTransactionQuerier = r2;
  }
  callContract(s) {
    return i2(this, arguments, function* ({ contractAddress: e2, methodArgs: t, methodInterface: r2 }) {
      return yield this.gaslessTransactionQuerier.call({ procedureName: "callContract", params: { chain: this.chain, contractAddress: e2, method: { args: t, stub: r2 } } });
    });
  }
};
var g = class extends Signer {
  constructor({ provider: t, clientId: r2, querier: s }) {
    var n;
    super();
    this.DEFAULT_ETHEREUM_CHAIN_ID = 5;
    this.clientId = r2, this.querier = s, this.endpoint = (n = t.connection) == null ? void 0 : n.url, defineReadOnly(this, "provider", t);
  }
  getAddress() {
    return i2(this, null, function* () {
      let { address: t } = yield this.querier.call({ procedureName: "getAddress", params: void 0 });
      return t;
    });
  }
  signMessage(t) {
    return i2(this, null, function* () {
      var n, o2, d, l;
      let r2 = yield (n = this.provider) == null ? void 0 : n.getNetwork();
      r2 && r2._defaultProvider;
      let { signedMessage: s } = yield this.querier.call({ procedureName: "signMessage", params: { message: t, chainId: (l = (d = yield (o2 = this.provider) == null ? void 0 : o2.getNetwork()) == null ? void 0 : d.chainId) != null ? l : this.DEFAULT_ETHEREUM_CHAIN_ID, rpcEndpoint: this.endpoint } });
      return s;
    });
  }
  signTransaction(t) {
    return i2(this, null, function* () {
      var s, n, o2;
      let { signedTransaction: r2 } = yield this.querier.call({ procedureName: "signTransaction", params: { transaction: t, chainId: (o2 = (n = yield (s = this.provider) == null ? void 0 : s.getNetwork()) == null ? void 0 : n.chainId) != null ? o2 : this.DEFAULT_ETHEREUM_CHAIN_ID, rpcEndpoint: this.endpoint } });
      return r2;
    });
  }
  _signTypedData(t, r2, s) {
    return i2(this, null, function* () {
      var o2, d, l;
      let { signedTypedData: n } = yield this.querier.call({ procedureName: "signTypedDataV4", params: { domain: t, types: r2, message: s, chainId: (l = (d = yield (o2 = this.provider) == null ? void 0 : o2.getNetwork()) == null ? void 0 : d.chainId) != null ? l : this.DEFAULT_ETHEREUM_CHAIN_ID, rpcEndpoint: this.endpoint } });
      return n;
    });
  }
  connect(t) {
    return new g({ clientId: this.clientId, provider: t, querier: this.querier });
  }
};
var S = class {
  constructor({ clientId: e2, chain: t, querier: r2 }) {
    this.clientId = e2, this.chain = t, this.walletManagerQuerier = r2, this.gasless = new I({ chain: t, clientId: e2, querier: r2 }), this.localStorage = new m({ clientId: e2 });
  }
  postWalletSetUp(n) {
    return i2(this, arguments, function* ({ deviceShareStored: e2, walletAddress: t, isIframeStorageEnabled: r2, walletUserId: s }) {
      return r2 || (yield this.localStorage.saveDeviceShare(e2, s)), { walletAddress: t };
    });
  }
  getUserWalletStatus() {
    return i2(this, null, function* () {
      let e2 = yield this.walletManagerQuerier.call({ procedureName: "getUserStatus", params: void 0 });
      return e2.status === "Logged In, Wallet Initialized" ? { status: "Logged In, Wallet Initialized", user: E(u({}, e2.user), { wallet: this }) } : e2;
    });
  }
  setChain(t) {
    return i2(this, arguments, function* ({ chain: e2 }) {
      this.chain = e2, this.gasless = new I({ chain: e2, clientId: this.clientId, querier: this.walletManagerQuerier });
    });
  }
  getEthersJsSigner(e2) {
    return i2(this, null, function* () {
      var r2;
      return new g({ clientId: this.clientId, provider: getDefaultProvider((r2 = e2 == null ? void 0 : e2.rpcEndpoint) != null ? r2 : o[this.chain]), querier: this.walletManagerQuerier });
    });
  }
};
var M = class {
  constructor({ clientId: e2, chain: t, styles: r2 }) {
    this.clientId = e2, this.querier = new w({ clientId: e2, customizationOptions: r2 }), this.wallet = new S({ clientId: e2, chain: t, querier: this.querier }), this.auth = new D({ clientId: e2, querier: this.querier, onAuthSuccess: (s) => i2(this, null, function* () {
      return yield this.wallet.postWalletSetUp(E(u({}, s.walletDetails), { walletUserId: s.storedToken.authDetails.userWalletId })), { user: { status: "Logged In, Wallet Initialized", authDetails: s.storedToken.authDetails, wallet: this.wallet, walletAddress: s.walletDetails.walletAddress } };
    }) });
  }
  getUser() {
    return i2(this, null, function* () {
      let e2 = yield this.wallet.getUserWalletStatus();
      switch (e2.status) {
        case "Logged In, New Device":
        case "Logged In, Wallet Uninitialized":
          return yield this.auth.logout(), this.getUser();
        case "Logged Out":
          return { status: "Logged Out" };
        case "Logged In, Wallet Initialized":
          return u({ status: "Logged In, Wallet Initialized" }, e2.user);
      }
    });
  }
};

export {
  y,
  A,
  L,
  f,
  re,
  q,
  G,
  R,
  M
};
//# sourceMappingURL=chunk-BZZ6K2TU.js.map
