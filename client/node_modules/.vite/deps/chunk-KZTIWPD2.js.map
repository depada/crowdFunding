{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/thirdweb-dev-sdk.browser.esm.js", "../../@thirdweb-dev/sdk/dist/abi-c67125ab.browser.esm.js", "../../@thirdweb-dev/sdk/dist/watchTransactions-549ee5ba.browser.esm.js"],
  "sourcesContent": ["export { g as getRpcUrl } from './QueryParams-7d9473b5.browser.esm.js';\nexport { bu as ALL_ROLES, cF as APPROVED_IMPLEMENTATIONS, d as AbiObjectSchema, e as AbiSchema, A as AbiTypeSchema, a7 as AddressOrEnsSchema, a6 as AddressSchema, bm as AdminRoleMissingError, b8 as AssetNotFoundError, bh as AuctionAlreadyStartedError, bn as AuctionHasNotEndedError, B as BYOCContractMetadataSchema, I as BaseSignaturePayloadInput, a3 as BigNumberSchema, a5 as BigNumberTransformSchema, a4 as BigNumberishSchema, c3 as COMMON_FACTORY, dc as CONTRACTS_MAP, cE as CONTRACT_ADDRESSES, c1 as CREATE2_FACTORY_BYTECODE, ab as CallOverrideSchema, cL as ChainId, f as ChainIdToAddressSchema, r as ClaimConditionInputArray, q as ClaimConditionInputSchema, p as ClaimConditionMetadataSchema, t as ClaimConditionOutputSchema, aV as ClaimEligibility, v as CommonContractOutputSchema, u as CommonContractSchema, y as CommonPlatformFeeSchema, x as CommonPrimarySaleSchema, w as CommonRoyaltySchema, D as CommonSymbolSchema, z as CommonTrustedForwarderSchema, n as CompilerMetadataFetchedSchema, aR as ContractAppURI, aI as ContractDeployer, ac as ContractEncoder, aK as ContractEvents, m as ContractInfoSchema, aL as ContractInterceptor, ad as ContractMetadata, aO as ContractOwner, aM as ContractPlatformFee, ag as ContractPrimarySale, aN as ContractPublishedMetadata, ae as ContractRoles, af as ContractRoyalty, G as CurrencySchema, H as CurrencyValueSchema, b as CustomContractDeploy, C as CustomContractInput, a as CustomContractOutput, c as CustomContractSchema, c6 as DEPLOYER_ABI, c5 as DEPLOYER_BYTECODE, ah as DelayedReveal, aQ as DeployTransaction, ai as DropClaimConditions, aj as DropErc1155ClaimConditions, bb as DuplicateFileNameError, bg as DuplicateLeafsError, cZ as EditionDropInitializer, c_ as EditionInitializer, aa as EndDateSchema, ay as Erc1155, aB as Erc1155BatchMintable, aD as Erc1155Burnable, az as Erc1155Enumerable, aE as Erc1155LazyMintable, aA as Erc1155Mintable, aC as Erc1155SignatureMintable, ak as Erc20, am as Erc20BatchMintable, ao as Erc20Burnable, al as Erc20Mintable, an as Erc20SignatureMintable, ap as Erc721, aw as Erc721BatchMintable, ax as Erc721Burnable, ar as Erc721ClaimableWithConditions, au as Erc721Enumerable, aq as Erc721LazyMintable, av as Erc721Mintable, at as Erc721Supply, as as Erc721WithQuantitySignatureMintable, cT as EventType, bo as ExtensionNotImplementedError, E as ExtraPublishMetadataSchemaInput, g as ExtraPublishMetadataSchemaOutput, F as FactoryDeploymentSchema, bf as FetchError, ba as FileNameMissingError, h as FullPublishMetadataSchemaInput, i as FullPublishMetadataSchemaOutput, bi as FunctionDeprecatedError, c4 as GAS_LIMIT_FOR_DEPLOYER, aJ as GasCostEstimator, Y as GenericRequest, cO as InterfaceId_IERC1155, cN as InterfaceId_IERC721, b6 as InvalidAddressError, cS as LINK_TOKEN_ADDRESS, cC as LOCAL_NODE_PKEY, bj as ListingNotFoundError, c$ as MarketplaceInitializer, aF as MarketplaceV3DirectListings, aG as MarketplaceV3EnglishAuctions, d0 as MarketplaceV3Initializer, aH as MarketplaceV3Offers, Z as MerkleSchema, W as MintRequest1155, U as MintRequest20, V as MintRequest721, X as MintRequest721withQuantity, bd as MissingOwnerRoleError, b7 as MissingRoleError, d1 as MultiwrapInitializer, cQ as NATIVE_TOKENS, cP as NATIVE_TOKEN_ADDRESS, d2 as NFTCollectionInitializer, d3 as NFTDropInitializer, bc as NotEnoughTokensError, b5 as NotFoundError, cD as OZ_DEFENDER_FORWARDER_ADDRESS, db as PREBUILT_CONTRACTS_APPURI_MAP, da as PREBUILT_CONTRACTS_MAP, d4 as PackInitializer, s as PartialClaimConditionInputSchema, P as PreDeployMetadata, o as PreDeployMetadataFetchedSchema, j as ProfileSchemaInput, k as ProfileSchemaOutput, l as PublishedContractSchema, be as QuantityAboveLimitError, a8 as RawDateSchema, bl as RestrictedTransferError, c2 as SIGNATURE, cM as SUPPORTED_CHAIN_IDS, cY as SUPPORTED_FEATURES, N as Signature1155PayloadInput, O as Signature1155PayloadInputWithTokenId, Q as Signature1155PayloadOutput, J as Signature20PayloadInput, K as Signature20PayloadOutput, L as Signature721PayloadInput, M as Signature721PayloadOutput, R as Signature721WithQuantityInput, T as Signature721WithQuantityOutput, d5 as SignatureDropInitializer, _ as SnapshotEntryInput, a0 as SnapshotEntryWithProofSchema, a2 as SnapshotInfoSchema, $ as SnapshotInputSchema, a1 as SnapshotSchema, d6 as SplitInitializer, a9 as StartDateSchema, S as StaticJsonRpcBatchProvider, aU as Status, aT as ThirdwebSDK, d7 as TokenDropInitializer, d8 as TokenInitializer, aP as Transaction, bp as TransactionError, b9 as UploadError, aS as UserWallet, d9 as VoteInitializer, bk as WrongListingTypeError, b0 as approveErc20Allowance, bT as assertEnabled, b$ as checkVerificationStatus, aX as cleanCurrencyAddress, cf as computeCloneFactoryAddress, cc as computeDeploymentAddress, co as computeDeploymentInfo, cd as computeEOAForwarderAddress, ce as computeForwarderAddress, cq as convertParamValues, b2 as convertToReadableQuantity, bt as createSnapshot, cv as createTransactionBatches, cl as deployContractDeterministic, ck as deployCreate2Factory, cn as deployWithThrowawayDeployer, bU as detectContractFeature, bO as detectFeatures, cp as encodeConstructorParamsForImplementation, cu as estimateGasForDeploy, bD as extractCommentFromMetadata, bB as extractConstructorParams, bE as extractConstructorParamsFromAbi, bH as extractEventsFromAbi, bF as extractFunctionParamsFromAbi, bC as extractFunctions, bG as extractFunctionsFromAbi, bK as extractIPFSHashFromBytecode, bI as extractMinimalProxyImplementationAddress, bx as fetchAbiFromAddress, ct as fetchAndCacheDeployMetadata, cs as fetchAndCachePublishedContractURI, by as fetchContractMetadata, bw as fetchContractMetadataFromAddress, aZ as fetchCurrencyMetadata, a_ as fetchCurrencyValue, bN as fetchExtendedReleaseMetadata, bM as fetchPreDeployMetadata, bL as fetchRawPredeployMetadata, b3 as fetchSnapshotEntryForAddress, bz as fetchSourceFilesFromMetadata, bQ as getAllDetectedExtensionNames, bP as getAllDetectedFeatureNames, cG as getApprovedImplementation, cV as getChainIdFromNetwork, cU as getChainProvider, cH as getContractAddressByChainId, de as getContractName, cI as getContractPublisherAddress, dd as getContractTypeForRemoteName, c9 as getCreate2FactoryAddress, cr as getCreate2FactoryDeploymentInfo, cK as getDefaultTrustedForwarders, cw as getDeployArguments, cm as getDeploymentInfo, ci as getEncodedConstructorParamsForThirdwebContract, cb as getInitBytecodeWithSalt, cj as getKeylessTxn, cJ as getMultichainRegistryAddress, cR as getNativeTokenByChainId, cX as getProviderFromRpcUrl, bv as getRoleHash, ca as getSaltHash, df as getSignerAndProvider, cB as getSupportedChains, cg as getThirdwebContractAddress, cx as getTrustedForwarders, bV as hasFunction, bA as hasMatchingAbi, br as includesErrorMessage, cW as isChainConfig, c7 as isContractDeployed, bY as isDowngradeVersion, c8 as isEIP155Enforced, bS as isExtensionEnabled, bR as isFeatureEnabled, bX as isIncrementalVersion, aW as isNativeToken, dg as isProvider, dh as isSigner, c0 as isVerifiedOnEtherscan, aY as normalizePriceValue, bq as parseRevertReason, bs as parseSnapshotInputs, ch as predictThirdwebContractAddress, b4 as prepareGaslessRequest, cz as resolveAddress, bJ as resolveContractUriFromAddress, cy as resolveEns, a$ as setErc20Allowance, cA as setSupportedChains, bW as toSemver, b1 as toWei, b_ as verify, bZ as verifyThirdwebPrebuiltImplementation } from './contract-metadata-fe1c84c2.browser.esm.js';\nexport { c as EditionMetadataInputOrUriSchema, b as EditionMetadataInputSchema, E as EditionMetadataOutputSchema, a as EditionMetadataWithOwnerOutputSchema, O as OptionalPropertiesInput, P as ProposalState, T as TokenMintInputSchema, i as computeNativeTokenAddress, j as deployContractDeterministicRaw, h as getAllDetectedExtensions, f as getAllDetectedFeatures, g as getCachedAbiForContract, m as matchesPrebuiltAbi, n as normalizeAmount, e as toDisplayValue, t as toEther, d as toUnits } from './abi-c67125ab.browser.esm.js';\nexport { D as DropErc1155History } from './drop-erc1155-history-72d2f40d.browser.esm.js';\nexport { T as TokenERC20History } from './erc-20-history-2c3960bf.browser.esm.js';\nexport { S as StandardErc20 } from './erc-20-standard-ba6470f0.browser.esm.js';\nexport { S as StandardErc721 } from './erc-721-standard-3dc70ce7.browser.esm.js';\nexport { S as StandardErc1155 } from './erc-1155-standard-8762a40b.browser.esm.js';\nexport { L as ListingType, a as MarketplaceAuction, M as MarketplaceDirect } from './marketplace-auction-230c9f7b.browser.esm.js';\nexport { V as VoteType } from './Vote-3b66775c.browser.esm.js';\nexport { h as hasERC20Allowance } from './hasERC20Allowance-c1033684.browser.esm.js';\nexport { P as PAPER_API_URL, a as PaperCheckout, c as createCheckoutLinkIntent, f as fetchRegisteredCheckoutId, p as parseChainIdToPaperChain } from './thirdweb-checkout-e261239e.browser.esm.js';\nexport { c as getBlock, d as getBlockNumber, e as getBlockWithTransactions, b as getChainId, g as getContract, a as getContractFromAbi, w as watchBlock, f as watchBlockNumber, h as watchBlockWithTransactions, i as watchTransactions } from './watchTransactions-549ee5ba.browser.esm.js';\nimport 'bn.js';\nimport 'ethers';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'tiny-invariant';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'ethers/lib/utils.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport 'ethers/lib/utils';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport '@thirdweb-dev/generated-abis';\n\n// handle browser vs node global\nglobalThis.global = globalThis;\n", "import { a5 as BigNumberTransformSchema, a7 as AddressOrEnsSchema, a3 as BigNumberSchema, a4 as BigNumberishSchema, bA as hasMatchingAbi, e as AbiSchema, di as extractFeatures, bO as detectFeatures, c9 as getCreate2FactoryAddress, co as computeDeploymentInfo, c7 as isContractDeployed, cb as getInitBytecodeWithSalt } from './contract-metadata-fe1c84c2.browser.esm.js';\nimport { z } from 'zod';\nimport { A as AmountSchema, C as CommonNFTOutput, b as CommonNFTInput, N as NFTInputOrUriSchema } from './QueryParams-7d9473b5.browser.esm.js';\nimport { utils, BigNumber } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { GENERATED_ABI } from '@thirdweb-dev/generated-abis';\n\nconst PropertiesInput = z.object({}).catchall(z.union([BigNumberTransformSchema, z.unknown()]));\n\n/**\n * @internal\n */\nconst OptionalPropertiesInput = z.union([z.array(PropertiesInput), PropertiesInput]).optional();\n\n/**\n * @internal\n */\nconst TokenMintInputSchema = z.object({\n  toAddress: AddressOrEnsSchema,\n  amount: AmountSchema\n});\n\n/**\n * @public\n */\n\n/**\n * @internal\n */\nconst EditionMetadataOutputSchema = z.object({\n  supply: BigNumberSchema,\n  metadata: CommonNFTOutput\n});\n\n/**\n * @internal\n */\nconst EditionMetadataWithOwnerOutputSchema = EditionMetadataOutputSchema.extend({\n  owner: z.string(),\n  quantityOwned: BigNumberSchema\n});\n\n/**\n * @internal\n */\nconst EditionMetadataInputSchema = z.object({\n  supply: BigNumberishSchema,\n  metadata: CommonNFTInput\n});\n\n/**\n * @internal\n */\nconst EditionMetadataInputOrUriSchema = z.object({\n  supply: BigNumberishSchema,\n  metadata: NFTInputOrUriSchema\n});\n\n/**\n * @public\n */\n\nlet ProposalState = /*#__PURE__*/function (ProposalState) {\n  ProposalState[ProposalState[\"Pending\"] = 0] = \"Pending\";\n  ProposalState[ProposalState[\"Active\"] = 1] = \"Active\";\n  ProposalState[ProposalState[\"Canceled\"] = 2] = \"Canceled\";\n  ProposalState[ProposalState[\"Defeated\"] = 3] = \"Defeated\";\n  ProposalState[ProposalState[\"Succeeded\"] = 4] = \"Succeeded\";\n  ProposalState[ProposalState[\"Queued\"] = 5] = \"Queued\";\n  ProposalState[ProposalState[\"Expired\"] = 6] = \"Expired\";\n  ProposalState[ProposalState[\"Executed\"] = 7] = \"Executed\";\n  return ProposalState;\n}({});\n\n/**\n * @internal\n * @param contractWrapper\n * @param abi\n * @returns\n */\nfunction matchesPrebuiltAbi(contractWrapper, abi) {\n  return hasMatchingAbi(AbiSchema.parse(contractWrapper.abi || []), [abi]);\n}\n\n/**\n * Return all the detected features in the abi\n * @param abi - parsed array of abi entries\n * @returns array of all detected extensions with full information on each feature\n * @internal\n * @deprecated use getAllDetectedExtensions instead\n */\nfunction getAllDetectedFeatures(abi) {\n  const features = [];\n  extractFeatures(detectFeatures(abi), features);\n  return features;\n}\n\n/**\n * Return all the detected extensions in the abi\n * @param abi - parsed array of abi entries\n * @returns array of all detected extensions with full information on each feature\n * @public\n */\nfunction getAllDetectedExtensions(abi) {\n  return getAllDetectedFeatures(abi).map(f => ({\n    ...f,\n    extensions: f.features\n  }));\n}\n\nasync function normalizeAmount(contractWrapper, amount) {\n  const decimals = await contractWrapper.readContract.decimals();\n  return utils.parseUnits(AmountSchema.parse(amount), decimals);\n}\n\nfunction toEther(amount) {\n  return utils.formatEther(amount);\n}\n\nfunction toUnits(amount, decimals) {\n  return utils.parseUnits(AmountSchema.parse(amount), decimals);\n}\n\nfunction toDisplayValue(amount, decimals) {\n  return utils.formatUnits(amount, decimals);\n}\n\n/**\n *\n * @internal\n * @param provider\n * @param storage\n * @param create2Factory\n */\nasync function computeNativeTokenAddress(provider, storage, create2Factory) {\n  if (!create2Factory) {\n    create2Factory = await getCreate2FactoryAddress(provider);\n  }\n  return (await computeDeploymentInfo(\"infra\", provider, storage, create2Factory, {\n    contractName: \"WETH9\"\n  })).transaction.predictedAddress;\n}\n\n/**\n * Deploy a contract at a deterministic address, using Create2 method\n * Address depends on the Create2 factory address.\n *\n * @public\n *\n * @param singer\n * @param bytecode\n * @param encodedArgs\n * @param create2FactoryAddress\n */\nasync function deployContractDeterministicRaw(signer, bytecode, encodedArgs, create2FactoryAddress, options, predictedAddress) {\n  let gasLimit = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 7000000;\n  // Check if the implementation contract is already deployed\n  invariant(signer.provider, \"Provider required\");\n  const contractDeployed = predictedAddress ? await isContractDeployed(predictedAddress, signer.provider) : false;\n  if (!contractDeployed) {\n    console.debug(`deploying contract via create2 factory at: ${predictedAddress}`);\n    const initBytecodeWithSalt = getInitBytecodeWithSalt(bytecode, encodedArgs);\n    let tx = {\n      to: create2FactoryAddress,\n      data: initBytecodeWithSalt\n    };\n    try {\n      await signer.estimateGas(tx);\n    } catch (e) {\n      console.debug(\"error estimating gas while deploying prebuilt: \", e);\n      tx.gasLimit = BigNumber.from(gasLimit);\n    }\n    await (await signer.sendTransaction(tx)).wait();\n  }\n}\n\nfunction getCachedAbiForContract(address) {\n  if (address in GENERATED_ABI) {\n    return GENERATED_ABI[address];\n  }\n  return undefined;\n}\n\nexport { EditionMetadataOutputSchema as E, OptionalPropertiesInput as O, ProposalState as P, TokenMintInputSchema as T, EditionMetadataWithOwnerOutputSchema as a, EditionMetadataInputSchema as b, EditionMetadataInputOrUriSchema as c, toUnits as d, toDisplayValue as e, getAllDetectedFeatures as f, getCachedAbiForContract as g, getAllDetectedExtensions as h, computeNativeTokenAddress as i, deployContractDeterministicRaw as j, matchesPrebuiltAbi as m, normalizeAmount as n, toEther as t };\n", "import { cz as resolveAddress, df as getSignerAndProvider, ds as SmartContract, dt as getCompositePluginABI, e as AbiSchema, dd as getContractTypeForRemoteName, du as ContractPublisher, da as PREBUILT_CONTRACTS_MAP } from './contract-metadata-fe1c84c2.browser.esm.js';\nimport { ThirdwebStorage } from '@thirdweb-dev/storage';\nimport IThirdwebContractABI from '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport { Contract, ethers } from 'ethers';\n\nlet STORAGE_CACHE = new ThirdwebStorage();\nconst CONTRACT_CACHE = new Map();\nfunction getContractCacheKey(address, chainId) {\n  return `${address}-${chainId}`;\n}\nfunction inContractCache(address, chainId) {\n  const cacheKey = getContractCacheKey(address, chainId);\n  return CONTRACT_CACHE.has(cacheKey);\n}\nfunction getCachedContract(address, chainId) {\n  if (!inContractCache(address, chainId)) {\n    throw new Error(`Contract ${address} was not found in cache`);\n  }\n  const cacheKey = getContractCacheKey(address, chainId);\n  return CONTRACT_CACHE.get(cacheKey);\n}\nfunction cacheContract(contract, address, chainId) {\n  const cacheKey = getContractCacheKey(address, chainId);\n  CONTRACT_CACHE.set(cacheKey, contract);\n}\nfunction getCachedStorage(storage) {\n  return storage || STORAGE_CACHE;\n}\n\nasync function getContractFromAbi(params) {\n  const resolvedAddress = await resolveAddress(params.address);\n  const [signer, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n  const chainId = (await provider.getNetwork()).chainId;\n  if (inContractCache(resolvedAddress, chainId)) {\n    return getCachedContract(resolvedAddress, chainId);\n  }\n  const parsedAbi = typeof params.abi === \"string\" ? JSON.parse(params.abi) : params.abi;\n  const contract = new SmartContract(signer || provider, resolvedAddress, await getCompositePluginABI(resolvedAddress, AbiSchema.parse(parsedAbi), provider, params.sdkOptions, getCachedStorage(params.storage)), getCachedStorage(params.storage), params.sdkOptions, chainId);\n  cacheContract(contract, resolvedAddress, chainId);\n  return contract;\n}\n\nasync function resolveContractType(params) {\n  try {\n    const contract = new Contract(params.address, IThirdwebContractABI, params.provider);\n    const remoteContractType = ethers.utils.toUtf8String(await contract.contractType())\n    // eslint-disable-next-line no-control-regex\n    .replace(/\\x00/g, \"\");\n    return getContractTypeForRemoteName(remoteContractType);\n  } catch (err) {\n    return \"custom\";\n  }\n}\n\nasync function getContract(params) {\n  const resolvedAddress = await resolveAddress(params.address);\n  const [signer, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n  const chainId = (await provider.getNetwork()).chainId;\n  if (inContractCache(resolvedAddress, chainId)) {\n    return getCachedContract(resolvedAddress, chainId);\n  }\n  if (!params.contractTypeOrAbi || params.contractTypeOrAbi === \"custom\") {\n    const contractType = await resolveContractType({\n      address: resolvedAddress,\n      provider\n    });\n    if (contractType === \"custom\") {\n      const publisher = new ContractPublisher(params.network, params.sdkOptions, getCachedStorage(params.storage));\n      try {\n        const metadata = await publisher.fetchCompilerMetadataFromAddress(resolvedAddress);\n        return getContractFromAbi({\n          ...params,\n          address: resolvedAddress,\n          abi: metadata.abi\n        });\n      } catch {\n        throw new Error(`No ABI found for this contract. Try importing it by visiting: https://thirdweb.com/${chainId}/${resolvedAddress}`);\n      }\n    } else {\n      const abi = await PREBUILT_CONTRACTS_MAP[contractType].getAbi(resolvedAddress, provider, getCachedStorage(params.storage));\n      return getContractFromAbi({\n        ...params,\n        address: resolvedAddress,\n        abi\n      });\n    }\n  } else if (typeof params.contractTypeOrAbi === \"string\" && params.contractTypeOrAbi in PREBUILT_CONTRACTS_MAP) {\n    const contract = await PREBUILT_CONTRACTS_MAP[params.contractTypeOrAbi].initialize(signer || provider, resolvedAddress, getCachedStorage(params.storage), params.sdkOptions);\n    cacheContract(contract, resolvedAddress, chainId);\n    return contract;\n  } else {\n    return getContractFromAbi({\n      ...params,\n      address: resolvedAddress,\n      abi: params.contractTypeOrAbi\n    });\n  }\n}\n\n// weakmap because if we GC the provider somewhere else we don't need to hold onto the promise anymore\nconst CHAIN_ID_CACHE = new WeakMap();\n\n/**\n * A function that returns the chainId for a given network input + sdk options combination.\n * This function will cache the promise for the chainId so that it can be reused.\n * You can call this function multiple times with the same params and it will only make one request to the provider.\n *\n * @returns the ChainId\n * @internal\n */\nasync function getChainId(params) {\n  const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n  let chainIdPromise;\n  // if we already have a promise for the chainId, use that\n  if (CHAIN_ID_CACHE.has(provider)) {\n    chainIdPromise = CHAIN_ID_CACHE.get(provider);\n  } else {\n    chainIdPromise = provider.getNetwork()\n    // we only want the chainId\n    .then(network => network.chainId).catch(err => {\n      // in the case where the provider fails we should remove the promise from the cache so we can try again\n      CHAIN_ID_CACHE.delete(provider);\n      // also re-throw the error so downstream can handle it\n      throw err;\n    });\n    CHAIN_ID_CACHE.set(provider, chainIdPromise);\n  }\n\n  // finally await the promise (will resolve immediately if already in cache and resolved)\n  return await chainIdPromise;\n}\n\n/**\n * Get the latest block number from a given network.\n *\n * @example\n * ```javascript\n * const block = await getBlockNumber({\n *  network: \"ethereum\"\n * });\n * ```\n * @returns the latest block number\n * @public\n */\nasync function getBlockNumber(params) {\n  const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n  return provider.getBlockNumber();\n}\nconst BLOCK_PROMISE_CACHE = new Map();\n/**\n * Get a specific block from a given network.\n *\n * @example\n * ```javascript\n * const block = await getBlock({\n *  network: \"ethereum\",\n *  block: 12345678\n * });\n * ```\n *\n * @returns the block for the given block number / block tag\n * @public\n */\nasync function getBlock(params) {\n  // first off get the chainId so we can check if we have something in cache for the blockNumber already\n  // this is 1 extra call once per possible provider\n  const chainId = await getChainId(params);\n  const blockTag = params.block;\n  const cacheKey = `${chainId}_${blockTag}`;\n  let blockPromise;\n  if (BLOCK_PROMISE_CACHE.has(cacheKey)) {\n    blockPromise = BLOCK_PROMISE_CACHE.get(cacheKey);\n  } else {\n    const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n    blockPromise = provider.getBlock(blockTag).catch(err => {\n      // in the case where the call fails we should remove the promise from the cache so we can try again\n      BLOCK_PROMISE_CACHE.delete(cacheKey);\n      // also re-throw the error so downstream can handle it\n      throw err;\n    });\n    BLOCK_PROMISE_CACHE.set(cacheKey, blockPromise);\n  }\n\n  // finally await the promise (will resolve immediately if already in cache and resolved)\n  return await blockPromise;\n}\nconst BLOCK_WITH_TRANSACTIONS_PROMISE_CACHE = new Map();\n/**\n * Get a specific block (with the transactions contained in it) from a given network.\n *\n * @example\n * ```javascript\n * const block = await getBlockWithTransactions({\n *  network: \"ethereum\",\n *  block: 12345678\n * });\n * ```\n *\n * @returns the block for the given block number / block tag\n * @public\n */\nasync function getBlockWithTransactions(params) {\n  // first off get the chainId so we can check if we have something in cache for the blockNumber already\n  // this is 1 extra call once per possible provider\n  const chainId = await getChainId(params);\n  const blockTag = params.block;\n  const cacheKey = `${chainId}_${blockTag}`;\n  let blockPromise;\n  if (BLOCK_PROMISE_CACHE.has(cacheKey)) {\n    blockPromise = BLOCK_WITH_TRANSACTIONS_PROMISE_CACHE.get(cacheKey);\n  } else {\n    const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n    blockPromise = provider.getBlockWithTransactions(blockTag).catch(err => {\n      // in the case where the call fails we should remove the promise from the cache so we can try again\n      BLOCK_WITH_TRANSACTIONS_PROMISE_CACHE.delete(cacheKey);\n      // also re-throw the error so downstream can handle it\n      throw err;\n    });\n    BLOCK_WITH_TRANSACTIONS_PROMISE_CACHE.set(cacheKey, blockPromise);\n  }\n\n  // finally await the promise (will resolve immediately if already in cache and resolved)\n  return await blockPromise;\n}\n\n/**\n * Watch for a new block number on a given network.\n *\n * @example\n * ```javascript\n * // this will log out the new block number every time a new block is finalized\n * const unsubscribe = watchBlockNumber({\n *   network: \"ethereum\",\n *   onBlockNumber: (blockNumber) => {\n *     console.log(\"new block number\", blockNumber);\n *   }\n * });\n * // later on you can call unsubscribe to stop listening for new blocks\n * unsubscribe();\n * ```\n *\n * @returns an unsubscribe function that will stop listening for new blocks when called\n * @public\n */\nfunction watchBlockNumber(params) {\n  const [, provider] = getSignerAndProvider(params.network, params.sdkOptions);\n  // start listening\n  provider.on(\"block\", params.onBlockNumber);\n  // return a function that unsubscribes the listener\n  return () => {\n    provider.off(\"block\", params.onBlockNumber);\n  };\n}\n/**\n * Watch for new blocks on a given network.\n *\n * @example\n * ```javascript\n * // this will log out the new block every time a new block is finalized\n * const unsubscribe = watchBlock({\n *   network: \"ethereum\",\n *   onBlock: (block) => {\n *     console.log(\"new block\", block);\n *   }\n * });\n * // later on you can call unsubscribe to stop listening for new blocks\n * unsubscribe();\n * ```\n *\n * @returns an unsubscribe function that will stop listening for new blocks when called\n * @public\n */\nfunction watchBlock(_ref) {\n  let {\n    onBlock,\n    ...sharedBlockParams\n  } = _ref;\n  async function onBlockNumber(blockNumber) {\n    try {\n      onBlock(await getBlock({\n        block: blockNumber,\n        ...sharedBlockParams\n      }));\n    } catch (err) {\n      // skip the block I guess?\n    }\n  }\n  // start listening and return the unsubscribe function from within watchBlockNumber\n  return watchBlockNumber({\n    ...sharedBlockParams,\n    onBlockNumber\n  });\n}\n/**\n * Watch for new blocks on a given network. (Includes parsed transactions)\n *\n * @example\n * ```javascript\n * // this will log out the new block every time a new block is finalized\n * const unsubscribe = watchBlockWithTransactions({\n *   network: \"ethereum\",\n *   onBlock: (block) => {\n *     console.log(\"new block\", block);\n *     console.log(\"new transactions\", block.transactions)\n *   }\n * });\n * // later on you can call unsubscribe to stop listening for new blocks\n * unsubscribe();\n *\n * @returns an unsubscribe function that will stop listening for new blocks when called\n * @public\n */\nfunction watchBlockWithTransactions(_ref2) {\n  let {\n    onBlock,\n    ...sharedBlockParams\n  } = _ref2;\n  async function onBlockNumber(blockNumber) {\n    try {\n      onBlock(await getBlockWithTransactions({\n        block: blockNumber,\n        ...sharedBlockParams\n      }));\n    } catch (err) {\n      // skip the block I guess?\n    }\n  }\n  // start listening and return the unsubscribe function from within watchBlockNumber\n  return watchBlockNumber({\n    ...sharedBlockParams,\n    onBlockNumber\n  });\n}\n\n/**\n * Watch for transactions to or from a given address.\n *\n * @example\n * ```javascript\n * // this will log out the new transactions every time a new block is finalized\n * const unsubscribe = watchTransactions({\n *   network: \"ethereum\",\n *   address: \"0x1234\",\n *   onTransactions: (transactions) => {\n *     console.log(\"new transactions\", transactions);\n *   }\n * });\n * // later on you can call unsubscribe to stop listening for new transactions\n * unsubscribe();\n * ```\n *\n * @returns an unsubscribe function that will stop listening for new transactions when called\n * @public\n */\nfunction watchTransactions(_ref) {\n  let {\n    address,\n    onTransactions,\n    ...sharedBlockParams\n  } = _ref;\n  // compute the toLowerCase address once so we don't have to do it on every block / transaction\n  const lcAddress = address.toLowerCase();\n  function onBlock(block) {\n    const transactions = block.transactions.filter(tx => {\n      // match on from first because it's guaranteed to exist\n      if (tx.from.toLowerCase() === lcAddress) {\n        // if we have a from address match on that then return true and early exit\n        return true;\n      }\n      // if we have a to address match on that and if it doesn't match then we want to return false anyways :)\n      return tx.to?.toLowerCase() === lcAddress;\n    });\n    // only call the callback if we have transactions to report\n    if (transactions.length > 0) {\n      onTransactions(transactions);\n    }\n  }\n  return watchBlockWithTransactions({\n    ...sharedBlockParams,\n    onBlock\n  });\n}\n\nexport { getContractFromAbi as a, getChainId as b, getBlock as c, getBlockNumber as d, getBlockWithTransactions as e, watchBlockNumber as f, getContract as g, watchBlockWithTransactions as h, watchTransactions as i, watchBlock as w };\n"],
  "mappings": "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",
  "names": ["ProposalState", "import_utils"]
}
